@using Orchard
@using Orchard.Core.Contents
@using Pipeline.Web.Orchard
@using Pipeline.Web.Orchard.Models
@model FormViewModel

@{
   AppendMeta("description", Model.Part.Title(), ",");
   Layout.Title = Model.Part.Title();

   Script.Require("jQuery").AtHead();
   Script.Require("Moment").AtHead();
   Script.Require("BlockUI").AtHead();
   Script.Require("jQueryUI_Autocomplete").AtHead();

   Script.Include("parsley.min.js").AtHead();
   Script.Include(@"pickadate\picker.js").AtHead();
   Script.Include(@"pickadate\picker.date.js").AtHead();
   Script.Include("load-image.all.min.js").AtHead();
   Script.Include("canvas-to-blob.min.js").AtHead();
   Script.Include("jquery.iframe-transport.min.js").AtHead();
   Script.Include("jquery.fileupload.min.js").AtHead();
   Script.Include("jquery.fileupload-process.min.js").AtHead();
   Script.Include("jquery.fileupload-image.min.js").AtHead();
   Script.Include("file.handler.js").AtHead();

   Style.Include(@"pickadate\themes\default.css").AtHead();
   Style.Include(@"pickadate\themes\default.date.css").AtHead();

   var request = WorkContext.HttpContext.Request;
   var method = request.HttpMethod;
   var orchard = WorkContext.Resolve<IOrchardServices>();

}

<style type="text/css">

    #id_busy {
        position: fixed;
        left: 46%;
        top: 40%;
        display: none;
        background: transparent url(@Url.Content("~/Modules/"+Common.ModuleName+"/Styles/busy.gif"));
        background-size: 149px 149px;
        background-repeat:no-repeat;
        z-index: 1020;
        height: 150px;
        width: 150px;
    }

    #busy-holder {
        background: transparent;
        width: 100%;
        height: 100%;
    }

    .form-control:focus { border-color: #66AFE9; }

   .fileinput-button {
      position: relative;
      overflow: hidden;
      display: inline-block
   }

   .fileinput-button input {
      position: absolute;
      top: 0;
      right: 0;
      margin: 0;
      opacity: 0;
      -ms-filter: 'alpha(opacity=0)';
      font-size: 200px;
      direction: ltr;
      cursor: pointer;
   }

   .progress { background-color: #dddddd; }

   .some-margin {
      margin-left:10px;
      margin-right:10px;
   }
</style>

<div class="btn-group pull-right some-margin">
   @if (orchard.Authorizer.Authorize(Permissions.EditContent)) {
      <button title="change this form" type="button" class="btn btn-warning btn-sm" onclick="window.open('@(Url.Content("~/Admin/Contents/Edit/" + Model.Part.Id + "?" + Common.ReturnUrlName + "=" + Url.Encode(Request.RawUrl)))', '_self');">
         <span class="glyphicon glyphicon-edit"></span>
      </button>
   }
   <button id="id_validate_button" title="validate this form" type="button" class="btn btn-info btn-sm">
      <span class="glyphicon glyphicon-check"></span>
   </button>
</div>

@using (Html.BeginFormAntiForgeryPost("Form", FormMethod.Post, new { role = "form", enctype = "multipart/form-data", id = "id_form" })) {
   if (Model.Geo) {
      <input type="hidden" id="id_geo_latitude" name="Orchard.Latitude" value="@Model.Latitude" />
      <input type="hidden" id="id_geo_longitude" name="Orchard.Longitude" value="@Model.Longitude" />
      <input type="hidden" id="id_geo_accuracy" name="Orchard.Accuracy" value="@Model.Accuracy" />
   }
   <div id="id_content" class="some-margin">@{ Html.RenderPartial("Content", Model); }</div>
   <input name="Orchard.Submit" id="id_submit" type="submit" value="Submit" class="btn btn-primary some-margin" />
}

<div id="busy_holder">
   <div id="id_busy"></div>
</div>

<script type="text/javascript" language="javascript">
    //<!--
   var settings = {
      method: "@(method)",
      geo: @Model.Geo.ToString().ToLower(),
      ajaxUrl: "@(Url.Action("Content", "Form", new RouteValueDictionary { {"area", Common.ModuleName }, { "id", Model.Part.Id } }))" + window.location.search,
      saveUrl: "@(Url.Action("Index", "Form", new RouteValueDictionary { {"area", Common.ModuleName }, { "id", Model.Part.Id } }))" + window.location.search,
      uploadUrl: "@(Url.Action("Upload","Form", new RouteValueDictionary { {"area", Common.ModuleName }}))"
   }

   $(document).ready(function () {

      window.Parsley.on('field:error', function() {
         this.$element.parent().addClass("has-error");
      });
      window.Parsley.on('field:success', function() {
         this.$element.parent().removeClass("has-error");
      });
      window.Parsley
         .addValidator('string', {
               requirementType: 'date',
               validateString: function(value, requirement) {
                  return moment(value).isValid();
               },
               messages: {
                  en: 'This value should be a date'
               }
         });

        $(document).bind("ajaxSend", function () {
            block();
        }).bind("ajaxComplete", function () {
            $("#id_busy").hide();
            $.unblockUI();
        });

       $('#id_validate_button').bind('click', function () {
            post();
        });

        function bind(html) {

            $("#id_content").html(html);
            $("#id_form").attr("action", settings.saveUrl);
            $("#id_form").parsley({
                errorsContainer: function(e) {
                    return e.$element.siblings('.help-container');
                },
                errorsWrapper: '<span class="help-container"></span>',
                errorTemplate: '<span class="help-block"></span> '
            });

            if (settings.geo) {
               getLocation();
            }
            setFocus();

            $("select[data-tfl-post-back='true'],input[data-tfl-post-back='true'],textarea[data-tfl-post-back='true']").change(function () {
                if ($(this).parsley().isValid()) {
                    post();
                } else {
                    $(this).parsley().validate();
                }
            });

            // block automatic form submit on enter
            $("select,input:not(input[type='submit'])").keydown(function (e) {
                var code = e.keyCode || e.which;
                if (code === 13) {
                    e.preventDefault();
                    // move to next field
                    var inputs = $(this).closest('form').find(':input');
                    inputs.eq(inputs.index(this) + 1).focus();
                    return false;
                }
                return true;
            });

            // track focus for back-end
            $("select,input,textarea").focusin(function () {
                $("#id_focus").val($(this).attr("name"));
                console.log($(this).attr("name") + " has focus");
            });

            $("#id_form").submit(function (e) {
               block();
            });

        }

        function post() {
            $.ajax({
                url: settings.ajaxUrl,
                type: "POST",
                data: $("#id_form").serialize(),
                success: function (html) {
                    bind(html);
                },
                error: function (html) {
                    bind(html);
                }
            }, "html");
        }

        function setFocus() {

            var name = $('#id_focus').val();
            console.log('setting focus to ' + name);
            var $target = $('#id_' + name);

            $target.focus().select();

            // ios doesn't refresh dropdowns when ajax re-populates
            if (navigator.userAgent.match(/(ip(hone|od|ad))/i)) {
                if ($target.is("select") && $target.closest("div").prev().has("select").length > 0) {
                    $target.blur();
                }
            }
        }

        function getLocation() {
            if ("geolocation" in navigator) {

                if ($('#id_geo_latitude').val() === "") {
                    navigator.geolocation.getCurrentPosition(
                        function(location) {
                            console.log(location.coords);
                            $('#id_geo_latitude').val(location.coords.latitude);
                            $('#id_geo_longitude').val(location.coords.longitude);
                            $('#id_geo_accuracy').val(location.coords.accuracy);
                        },
                        function(error) {
                            console.log(error);
                        }
                    );
                }

                navigator.geolocation.getCurrentPosition(
                    function(location) {
                        console.log(location.coords);
                        $('#id_geo_latitude').val(location.coords.latitude);
                        $('#id_geo_longitude').val(location.coords.longitude);
                        $('#id_geo_accuracy').val(location.coords.accuracy);
                    },
                    function(error) {
                        console.log(error);
                    },
                    {
                        enableHighAccuracy: true,
                        maximumAge        : 15000,
                        timeout           : Infinity
                    }
                );

            } else {
                console.log("geolocation IS NOT available");
            }
        }

         function block() {
            $('#id_busy').show();
            $.blockUI({
                  message: null,
                  css: {
                     border: 'none',
                     padding: '15px',
                     backgroundColor: '#000',
                     '-webkit-border-radius': '10px',
                     '-moz-border-radius': '10px',
                     opacity: .5,
                     color: '#fff',
                     baseZ: 1021
                  }
            });
         }

        setTimeout(function () { $(".zone-messages").fadeOut(); }, 5000);

      bind();
   });


   //-->
</script>



