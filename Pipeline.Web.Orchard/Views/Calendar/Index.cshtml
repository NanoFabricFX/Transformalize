@using Orchard.ContentManagement
@using Transformalize.Configuration
@using Pipeline.Web.Orchard
@using Pipeline.Web.Orchard.Models
@using Pipeline.Web.Orchard.Services.Contracts
@using Transformalize.Contracts
@model ReportViewModel

@{
   var output = Request["output"] ?? "page";
   var settings = WorkContext.CurrentSite.As<PipelineSettingsPart>();
   var entity = Model.Process.Entities.FirstOrDefault() ?? new Entity { Name = "Missing Entity" };
   var allFields = entity.GetAllFields().Where(f => !f.System).ToArray();
   var linkService = WorkContext.Resolve<ILinkService>();
   var hasActions = Model.Process.Actions.Any(a => !a.Before && !a.After && !string.IsNullOrEmpty(a.Description) && !a.Description.StartsWith("Batch", StringComparison.OrdinalIgnoreCase));

   if (hasActions) {
      var bv = allFields.FirstOrDefault(f => f.Alias == Common.BatchValueFieldName);
      if (bv == null) {
         hasActions = false;
      } else {
         bv.Output = false;
      }
   }

   var renderCalendar = true;
   var isMissingRequiredParameters = Model.Process.Parameters.Any(p => p.Required && (Request.QueryString[p.Name] == null || Request.QueryString[p.Name] == "*"));

   Script.Require("jQuery").AtHead();
   Script.Require("jQueryUI").AtHead();
   Script.Require("underscore").AtHead();
   Script.Include("https://cdnjs.cloudflare.com/ajax/libs/bootstrap-multiselect/0.9.15/js/bootstrap-multiselect.min.js");

   Script.Include("calendar.js").AtFoot();

   foreach (var script in Model.Process.Scripts.Where(s => s.Global && !string.IsNullOrEmpty(s.File) && (s.Language == "js" || s.Language == Transformalize.Constants.DefaultSetting && s.File.EndsWith(".js", StringComparison.OrdinalIgnoreCase)))) {
      Script.Include(script.File);
   }

   if (hasActions) {
      Script.Require("BlockUI");
   }

   Style.Require("jQueryUI_Orchard");
   Style.Include("https://cdnjs.cloudflare.com/ajax/libs/bootstrap-multiselect/0.9.15/css/bootstrap-multiselect.css");
   Style.Include("calendar.css");

   foreach (var script in Model.Process.Scripts.Where(s => s.Global && !string.IsNullOrEmpty(s.File) && (s.Language == "css" || s.Language == Transformalize.Constants.DefaultSetting && s.File.EndsWith(".css", StringComparison.OrdinalIgnoreCase)))) {
      Style.Include(script.File);
   }

   var title = entity.Label == string.Empty ? entity.Alias : entity.Label;
   AppendMeta("description", title, ",");
   Layout.Title = title;

}

<style>
    .btn-xs, .btn-group-xs > .btn {
        border-radius: 3px;
        font-size: 9px;
        line-height: 1.5;
    }

    button.multiselect {
        -ms-border-bottom-left-radius: 0 !important;
        border-bottom-left-radius: 0 !important;
        -ms-border-top-left-radius: 0 !important;
        border-top-left-radius: 0 !important;
    }

    #busy {
        position: fixed;
        left: 46%;
        top: 40%;
        display: none;
        background: transparent url(@Url.Content("~/Modules/Pipeline.Web.Orchard/Styles/busy.gif"));
        background-size: 149px 149px;
        background-repeat:no-repeat;
        z-index: 1020;
        height: 150px;
        width: 150px;
    }

    #busy-holder {
        background: transparent;
        width: 100%;
        height: 100%;
    }

    .form-inline .multiselect-container label.checkbox, .form-inline .multiselect-container label.radio {
        padding: 0px 20px 0px 10px;
    }

   /* Calendar Specfic Styles Go here */

   @foreach (var script in Model.Process.Scripts.Where(s => s.Global && s.Language == "css" && string.IsNullOrEmpty(s.File))) {
   <text>/* @script.Name css script */</text>
   @Html.Raw(script.Content)

   }
</style>

@foreach (var logEntry in Model.Process.Log.Where(le => le.LogLevel == LogLevel.Error)) {
   <div class="alert alert-danger" role="alert">@logEntry.Message</div>
}

@foreach (var logEntry in Model.Process.Log.Where(le => le.LogLevel == LogLevel.Warn)) {
   <div class="alert alert-warning" role="alert">@logEntry.Message</div>
}

<form id="id_report" class="form-inline" role="form" method="GET">

   <input id="id_sort" class="bsh" type="hidden" name="sort" value="@(Request["sort"] ?? string.Empty)" />
   @if ((Request.QueryString[Common.InputFileIdName] ?? "0") != "0") {
      <input id="id_file" class="bsh" type="hidden" name="@(Common.InputFileIdName)" value="@(Request.QueryString[Common.InputFileIdName])" />
   }
   <input id="id_page" class="bsh" type="hidden" name="page" value="@entity.Page" />
   <input id="id_size" class="bsh" type="hidden" name="size" value="@(entity.Size)" />
   <input id="id_output" class="bsh" type="hidden" name="output" value="@(output == "page" ? string.Empty : output)" />

   @foreach (var parameter in Model.Process.Parameters.Where(p => !p.Prompt && Request.QueryString[p.Name] != null).Select(p => p.Name)) {
      <input type="hidden" name="@parameter" value="@(Request.QueryString[parameter])" />
   }

   @Html.Partial("Shared/Parameters", Model)

   @Html.Partial("Shared/Controls", Model)


   @if (isMissingRequiredParameters) {
      renderCalendar = false;  // message is already present
   }

   <div id="id_calendar_alert" style="display: none;" class="alert alert-info" role="alert"><span class="glyphicon glyphicon-info-sign"> </span></div>

   @if (renderCalendar) {

<div class="row" style="padding-top: 2px; padding-bottom: 2px;">

      <div class="col-md-3 pull-left">
         <h3 id="page-header" class="text-warning" style="margin: 2px 0px 0px 0px;"></h3>
      </div>
      <div class="col-md-6">
         <div class="btn-group calendar-navs" role="group">
            <button class="btn btn-primary btn-sm" data-calendar-nav="prev"><span class="glyphicon glyphicon-chevron-left"></span> </button>
            <button class="btn btn-info btn-sm" data-calendar-nav="today">
               <span class="visible-xs visible-sm">Now</span>
               <span class="visible-md visible-lg">Today</span>
            </button>
            <button class="btn btn-primary btn-sm" data-calendar-nav="next"> <span class="glyphicon glyphicon-chevron-right"></span></button>
         </div>
      </div>
      <div class="col-md-3">

         <div class="btn-group calendar-views pull-right" role="group">
            <button class="btn btn-warning btn-sm" data-calendar-view="year">
               <span class="visible-xs visible-sm">Y</span>
               <span class="visible-md visible-lg">Year</span>
            </button>
            <button class="btn btn-warning active btn-sm" data-calendar-view="month">
               <span class="visible-xs visible-sm">M</span>
               <span class="visible-md visible-lg">Month</span>
            </button>
            <button class="btn btn-warning btn-sm" data-calendar-view="week">
               <span class="visible-xs visible-sm">W</span>
               <span class="visible-md visible-lg">Week</span>
            </button>
            <button class="btn btn-warning btn-sm" data-calendar-view="day">
               <span class="visible-xs visible-sm">D</span>
               <span class="visible-md visible-lg">Day</span>
            </button>
         </div>
      </div>
   
</div>

   <div id="id_calendar" style="height: 655px; width: 100%; padding-top: 2px;"></div>
   <script>
            /* using calendar from here: https://github.com/Serhioromano/bootstrap-calendar */
            //<!--
            var dataUrl = '@(linkService.Create(Request, Session, Model.Part.Id, Url.Action("Index", "Export", new RouteValueDictionary { { "Id", Model.Part.Id } }), "calendar", false))';
            var templatePath = '@Url.Content("~/Modules/Pipeline.Web.Orchard/Scripts/tmpls/")';

            $(document).ready(function() {

               $('#id_calendar').height(Math.round($(window).height() * .71));

               var renderCalendar = function () {
                  $.getJSON( dataUrl, function(data) {
                     var options = {
                       format12: true,
                       events_source: function () { return data; },
                       view: 'month',
                       tmpl_path: templatePath,
                       tmpl_cache: false,
                       day: 'now',
                       onAfterEventsLoad: function (events) {
                          console.log("events loaded");
                       },
                       onAfterViewLoad: function (view) {
                          $('#page-header').text(this.getTitle());
                          $('.calendar-views').removeClass('active');
                          $('button[data-calendar-view="' + view + '"]').addClass('active');
                       },
                       classes: {
                          months: {
                             general: 'label'
                          }
                       }
                    };
                    var calendar = $('#id_calendar').calendar(options);

                    $('.calendar-views button[data-calendar-view]').each(function () {
                       var $this = $(this);
                       $this.click(function (e) {
                          e.preventDefault();
                          calendar.view($this.data('calendar-view'));
                       });
                    });

                    $('.calendar-navs button[data-calendar-nav]').each(function () {
                       var $this = $(this);
                       $this.click(function (e) {
                          e.preventDefault(e);
                          calendar.navigate($this.data('calendar-nav'));
                       });
                    });

                 });
               }

               renderCalendar();
            });
            //-->
   </script>
   }
</form>

<div id="busy_holder">
   <div id="busy"></div>
</div>

<script type="text/javascript">
    //<!--

    var controls = {
        setPage: function(page) {
            $('#id_page').val(page);
        },
        submit: function(page) {
            controls.setPage(page);
            $("#id_report").submit();
        },
        setSize: function(size) {
            $('#id_size').val(size);
            controls.submit(1);
        },
        setSort: function(sort) {
            $('#id_sort').val(sort);
        },
        lastChecked : null,
        bulkActionLength: 0
    }

    // https://stackoverflow.com/questions/1634748/how-can-i-delete-a-query-string-parameter-in-javascript
    function removeUrlParameter(url, parameter) {
        //prefer to use l.search if you have a location/link object
        var urlparts= url.split('?');
        if (urlparts.length>=2) {

            var prefix= encodeURIComponent(parameter)+'=';
            var pars= urlparts[1].split(/[&;]/g);

            //reverse iteration as may be destructive
            for (var i= pars.length; i-- > 0;) {
                //idiom for string.startsWith
                if (pars[i].lastIndexOf(prefix, 0) !== -1) {
                    pars.splice(i, 1);
                }
            }

            url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");
            return url;
        } else {
            return url;
        }
    }

    function bulkAction(page,description,id) {
        var length = $('.bulk-action:checked').length;
        if (length > 0) {
            $.blockUI({
                message: null,
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff',
                    baseZ: 1021
                }
            });
            var $form = $('#id_report');
            $form.attr('method', 'POST');
            $form.attr('action', '@(Url.Action("Index", "Action", new RouteValueDictionary { { "Id", Model.Part.Id } }))');
            $form.append('<input type="hidden" name="__RequestVerificationToken" value="@(@Html.AntiForgeryTokenValueOrchard())" />');
            $form.append('<input type="hidden" name="action" value="'+description+'" />');
            $form.append('<input type="hidden" name="actionId" value="'+id+'" />');
            $form.append('<input type="hidden" name="count" value="'+controls.bulkActionLength+'" />');
            $('#id_output').val("batch");
            controls.submit(page);
        }
    }

    $(document).ready(function() {

        $('#id_report select').multiselect({
            enableFiltering: true,
            enableCaseInsensitiveFiltering: true,
            onChange: function () {
                controls.setPage(1);
                if (!this.$select[0].multiple) {
                    controls.submit(1);
                }
            },
            maxHeight: 400,
            nonSelectedText: 'ALL',
            nSelectedText: 'Selected',
            allSelectedText: 'Selected',
            buttonContainer: '<div class="btn-group btn-group-sm" />',
            templates: {
                filter: '<li class="multiselect-item filter"><div class="input-group input-group-sm"><input class="form-control multiselect-search" type="text"></div></li>',
                filterClearBtn: '<span class="input-group-btn"> <button class="btn btn-default multiselect-clear-filter" type="button"><i class="glyphicon glyphicon-remove-circle"></i></button> <button class="btn btn-primary search-button" type="button"><i class="glyphicon glyphicon-search"></i></button> </span>',
            }
        });
        $('span.multiselect-selected-text').parent().removeClass('btn-default');
        $('span.multiselect-selected-text').not('span.multiselect-selected-text:contains("ALL")').parent().addClass('btn-info');

        $('.search-button').bind('click', function(e) {
            $('#id_report').submit();
        });

        $(".form-control.date").datepicker({ dateFormat: "yy-mm-dd" });

        $('#id_report').bind('submit', function(e) {

            // stop double submit
            $('#id_submit').prop('disabled', true);

            // the rest of this just cleans up the URL (bookmark)
            var page = parseInt($('#id_page').val());

            if (page <= 1) {
                $('#id_page').attr('disabled', true);
            }

            $('#id_report input').filter(function() {
                var value = $(this).val();
                return value === "*" || value === "";
            }).attr('disabled',true);

            $("#id_report select").each(function() {
                var selected = $('option:selected', this);
                var count = selected.length;
                if (count === 0) {
                    $(this).attr('disabled', true);
                } else if (count === 1) {
                    var value = $(selected[0]).val();
                    if (value === "" || value === "*") {
                        $(this).attr('disabled', true);
                    }
                }
            });

            $('#busy').show();

            // normal submit handler fires
            return true;
        });

        $('.clear-button').click(function() {

            // set single select back to first
            $('#id_report select:not([multiple])').val($('#id_report select option:first').val());

            // set multi-select to none
            $('#id_report select[multiple]').multiselect('deselectAll', false);
            $('#id_report select[multiple]').multiselect('updateButtonText');

            // set other inputs to blank
            $('#id_report input:visible').val("");

            controls.submit(@(entity.Page == 0 ? 0 : 1));
        });

    });
    //-->
</script>