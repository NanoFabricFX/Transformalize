@using Orchard
@using Transformalize.Configuration
@using Pipeline.Web.Orchard
@using Pipeline.Web.Orchard.Models
@using Transformalize.Contracts

@model ReportViewModel
@{
    var output = Request["output"] ?? "page";
    var entity = Model.Process.Entities.FirstOrDefault() ?? new Entity { Name = "Missing Entity" };
    var allFields = entity.GetAllFields().Where(f => !f.System).ToArray();
    var orchard = WorkContext.Resolve<IOrchardServices>();
    var hasActions = Model.Process.Actions.Any(a => !a.Before && !a.After && !string.IsNullOrEmpty(a.Description) && !a.Description.StartsWith("Batch", StringComparison.OrdinalIgnoreCase));

    if (hasActions) {
        var bv = allFields.FirstOrDefault(f => f.Alias == Common.BatchValueFieldName);
        if (bv == null) {
            hasActions = false;
        } else {
            bv.Output = false;
        }
    }

    Style.Require("jQueryUI_Orchard");
    Script.Require("jQuery").AtHead();
    Script.Require("jQueryUI").AtHead();
    Script.Include("https://cdnjs.cloudflare.com/ajax/libs/bootstrap-multiselect/0.9.15/js/bootstrap-multiselect.min.js");

    Script.Include("https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.21.0/pivot.min.js");
    Script.Include("https://cdnjs.cloudflare.com/ajax/libs/d3/5.7.0/d3.min.js");
    // Script.Include("https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js");
    Script.Include("https://cdnjs.cloudflare.com/ajax/libs/c3/0.6.7/c3.min.js");
    Script.Include("https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.21.0/c3_renderers.min.js");
    Script.Include("https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.21.0/d3_renderers.min.js");
    Script.Include("https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.21.0/export_renderers.min.js");
    //Script.Include("https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.21.0/gchart_renderers.min.js");
    //Script.Include("https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.21.0/plotly_renderers.min.js");
    Script.Include("https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.21.0/tips_data.min.js");
    //Script.Include("https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.21.0/pivot_spec.min.js");

    if (hasActions) {
        Script.Require("BlockUI");
    }

    Style.Include("https://cdnjs.cloudflare.com/ajax/libs/bootstrap-multiselect/0.9.15/css/bootstrap-multiselect.css");
    Style.Include("https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.21.0/pivot.min.css");
    Style.Include("https://cdnjs.cloudflare.com/ajax/libs/c3/0.6.7/c3.min.css");

    var fields = entity.GetAllOutputFields().Where(f => !f.System && f.Alias != Common.BatchValueFieldName).ToArray();
    var title = entity.Label == string.Empty ? entity.Alias : entity.Label;
    var runner = orchard.WorkContext.Resolve<IRunTimeRun>();
    var hiddenFromAggregators = fields.Any(f=>f.Measure) ? string.Join(",", fields.Where(f => !f.Measure).Select(f => Newtonsoft.Json.JsonConvert.ToString(f.Alias))) : string.Join(",", fields.Where(f => !f.IsNumeric()).Select(f => Newtonsoft.Json.JsonConvert.ToString(f.Alias)));
    var hiddenFromDragDrop = fields.Any(f => f.Dimension.Equals("true")) ? string.Join(",", fields.Where(f => !f.Dimension.Equals("true")).Select(f => Newtonsoft.Json.JsonConvert.ToString(f.Alias))) : string.Join(",", fields.Where(f => f.IsNumeric()).Select(f => Newtonsoft.Json.JsonConvert.ToString(f.Alias)));

    AppendMeta("description", title, ",");
    Layout.Title = title;

}

<script type="text/javascript" language="javascript">
    //<!--
    window.data = [
        [ @(Html.Raw(string.Join(",", fields.Select(f=> Newtonsoft.Json.JsonConvert.ToString(f.Label))))) ],
        @foreach (var row in runner.Run(Model.Process)) {
            var data = string.Join(",", fields.Select(f => Newtonsoft.Json.JsonConvert.ToString(f.Convert(row[f]))));
            <text>[@(Html.Raw(data))],</text>
        }
    ];
    //-->
</script>

<style>
    .btn-xs, .btn-group-xs > .btn {
        border-radius: 3px;
        font-size: 9px;
        line-height: 1.5;
    }

    button.multiselect {
        -ms-border-bottom-left-radius: 0 !important;
        border-bottom-left-radius: 0 !important;
        -ms-border-top-left-radius: 0 !important;
        border-top-left-radius: 0 !important;
    }

    #busy {
        position: fixed;
        left: 46%;
        top: 40%;
        display: none;
        background: transparent url(@Url.Content("~/Modules/Pipeline.Web.Orchard/Styles/busy.gif"));
        background-size: 149px 149px;
        background-repeat:no-repeat;
        z-index: 1020;
        height: 150px;
        width: 150px;
    }

    #busy-holder {
        background: transparent;
        width: 100%;
        height: 100%;
    }

    .form-inline .multiselect-container label.checkbox, .form-inline .multiselect-container label.radio {
        padding: 0px 20px 0px 10px;
    }

</style>

@foreach (var logEntry in Model.Process.Log.Where(le => le.LogLevel == LogLevel.Error)) {
    <div class="alert alert-danger" role="alert">@logEntry.Message</div>
}

@foreach (var logEntry in Model.Process.Log.Where(le => le.LogLevel == LogLevel.Warn)) {
    <div class="alert alert-warning" role="alert">@logEntry.Message</div>
}

<form id="id_report" class="form-inline" role="form" method="GET">

    <input id="id_sort" class="bsh" type="hidden" name="sort" value="@(Request["sort"] ?? string.Empty)" />
    @if ((Request.QueryString[Common.InputFileIdName] ?? "0") != "0") {
        <input id="id_file" class="bsh" type="hidden" name="@(Common.InputFileIdName)" value="@(Request.QueryString[Common.InputFileIdName])" />
    }
    <input id="id_page" class="bsh" type="hidden" name="page" value="@entity.Page" />
    <input id="id_size" class="bsh" type="hidden" name="size" value="@(entity.Size)" />
    <input id="id_output" class="bsh" type="hidden" name="output" value="@(output == "page" ? string.Empty : output)" />

    @foreach (var parameter in Model.Process.Parameters.Where(p => !p.Prompt && Request.QueryString[p.Name] != null).Select(p => p.Name)) {
        <input type="hidden" name="@parameter" value="@(Request.QueryString[parameter])" />
    }

    @Html.Partial("~/Modules/Pipeline.Web.Orchard/Views/Shared/Parameters.cshtml", Model.Process)

    @Html.Partial("~/Modules/Pipeline.Web.Orchard/Views/Shared/Controls.cshtml", Model)

    @if (true) {
        <div id="output" style="height: 655px; width: 100%"></div>
        <script>
            //<!--
            $(function () {
                $("#output").pivotUI(window.data, {
                        showUI: true,
                        hiddenAttributes: [""],
                        hiddenFromAggregators: [ @(Html.Raw(hiddenFromAggregators)) ],
                        hiddenFromDragDrop: [@(Html.Raw(hiddenFromDragDrop))],
                        renderers: $.extend(
                            $.pivotUtilities.renderers,
                            $.pivotUtilities.c3_renderers,
                            $.pivotUtilities.export_renderers
                        )
                    }
                );
            });
            //-->
        </script>
    } else {
        <div class="row">
            <div class="col-sm-12">
                <div class="alert alert-danger" role="alert">You may pivot @entity.Hits records.</div>
            </div>
        </div>
    }
</form>

<div id="busy_holder">
    <div id="busy"></div>
</div>

<script type="text/javascript">
    //<!--

    var controls = {
        setPage: function (page) {
            $('#id_page').val(page);
        },
        submit: function (page) {
            controls.setPage(page);
            $("#id_report").submit();
        },
        setSize: function (size) {
            $('#id_size').val(size);
            controls.submit(1);
        },
        setSort: function (sort) {
            $('#id_sort').val(sort);
        },
        lastChecked: null,
        bulkActionLength: 0
    };

    // https://stackoverflow.com/questions/1634748/how-can-i-delete-a-query-string-parameter-in-javascript
    function removeUrlParameter(url, parameter) {
        //prefer to use l.search if you have a location/link object
        var urlparts= url.split('?');   
        if (urlparts.length>=2) {

            var prefix= encodeURIComponent(parameter)+'=';
            var pars= urlparts[1].split(/[&;]/g);

            //reverse iteration as may be destructive
            for (var i= pars.length; i-- > 0;) {    
                //idiom for string.startsWith
                if (pars[i].lastIndexOf(prefix, 0) !== -1) {  
                    pars.splice(i, 1);
                }
            }

            url= urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : "");
            return url;
        } else {
            return url;
        }
    }

    function bulkAction(page,description,id) {
        var length = $('.bulk-action:checked').length;
        if (length > 0) {
            $.blockUI({
                message: null,
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff',
                    baseZ: 1021
                }
            });
            var $form = $('#id_report');
            $form.attr('method', 'POST');
            $form.attr('action', removeUrlParameter(window.location.href,"output"));
            $form.append('<input type="hidden" name="__RequestVerificationToken" value="@(@Html.AntiForgeryTokenValueOrchard())" />');
            $form.append('<input type="hidden" name="action" value="'+description+'" />');
            $form.append('<input type="hidden" name="actionId" value="'+id+'" />');
            $form.append('<input type="hidden" name="count" value="'+controls.bulkActionLength+'" />');
            $('#id_output').val("batch");
            controls.submit(page);
        }
    }

    function updateBulkActions() {
        var length = $(".bulk-action:checked").length;
        var all = length === $(".bulk-action").length;
        $(".bulk-action-link").each(function () {
            var link = $(this);
            var len = (all ? "All" : $('#select-all:checked').length > 0 ? length - 1 : length);
            controls.bulkActionLength =  len;
            link.html(link.attr('rel') + '&nbsp;&nbsp;<span class="badge">' + len + "</span>");
        });
    }

    $(document).ready(function() {

        function removeMessages() {
            $(".zone-messages").fadeOut();
        }
        setTimeout(removeMessages, 5000);

        $('#parameters select').multiselect({
            enableFiltering: true,
            enableCaseInsensitiveFiltering: true,
            onChange: function () {
                controls.setPage(1);
                if (!this.$select[0].multiple) {
                    controls.submit(1);
                }
            },
            maxHeight: 400,
            nonSelectedText: 'ALL',
            nSelectedText: 'Selected',
            allSelectedText: 'Selected',
            buttonContainer: '<div class="btn-group btn-group-sm" />',
            templates: {
                filter: '<li class="multiselect-item filter"><div class="input-group input-group-sm"><input class="form-control multiselect-search" type="text"></div></li>',
                filterClearBtn: '<span class="input-group-btn"> <button class="btn btn-default multiselect-clear-filter" type="button"><i class="glyphicon glyphicon-remove-circle"></i></button> <button class="btn btn-primary search-button" type="button"><i class="glyphicon glyphicon-search"></i></button> </span>',
            }
        });
        $('span.multiselect-selected-text').parent().removeClass('btn-default');
        $('span.multiselect-selected-text').not('span.multiselect-selected-text:contains("ALL")').parent().addClass('btn-info');

        $('.search-button').bind('click', function(e) {
            $('#id_report').submit();
        });

        $(".form-control.date").datepicker({ dateFormat: "yy-mm-dd" });

        $('#id_report').bind('submit', function(e) {

            // stop double submit
            $('#id_submit').prop('disabled', true);

            // the rest of this just cleans up the URL (bookmark)
            var page = parseInt($('#id_page').val());

            if (page <= 1) {
                $('#id_page').attr('disabled', true);
            }

            $('#id_report input').filter(function() {
                var value = $(this).val();
                return value === "*" || value === "";
            }).attr('disabled',true);

            $("#id_report select").each(function() {
                var selected = $('option:selected', this);
                var count = selected.length;
                if (count === 0) {
                    $(this).attr('disabled', true);
                } else if (count === 1) {
                    var value = $(selected[0]).val();
                    if (value === "" || value === "*") {
                        $(this).attr('disabled', true);
                    }
                }
            });

            $('#busy').show();

            // normal submit handler fires
            return true;
        });

        $('.clear-button').click(function() {

            // set single select back to first
            $('#id_report select:not([multiple])').val($('#id_report select option:first').val());

            // set multi-select to none
            $('#id_report select[multiple]').multiselect('deselectAll', false);
            $('#id_report select[multiple]').multiselect('updateButtonText');

            // set other inputs to blank
            $('#id_report input:visible').val("");

            controls.submit(@(entity.Page == 0 ? 0 : 1));
        });

        $('.sortable').click(function() {
            $(this).toggleClass('btn-sort').toggleClass('btn-primary');

            $(this).siblings().each(function(i) {
                if ($(this).hasClass('btn-primary')) {
                    $(this).removeClass('btn-primary').addClass('btn-sort');
                }
            });

            var sort = '';
            $('td.sorter').each(function(i) {
                var field = $(this).attr('data-order-by');
                if (field) {
                    var index = 0;
                    $('a', $(this)).each(function(j) {
                        if ($(this).hasClass('btn-primary')) {
                            switch (index) {
                            case 0:
                                sort += field + 'a.';
                                break;
                            case 1:
                                sort += field + 'd.';
                                break;
                            default:
                                break;
                            }
                        }
                        index++;
                    });
                }
            });
            var expression = sort.replace(/^\.+|\.+$/gm, '');
            console.log(expression);
            controls.setSort(expression);
            controls.submit(@(entity.Page == 0 ? 0 : 1));
        });

        $(":checkbox[name=select-all]").click(function () {
            $(":checkbox[name=row]").prop("checked", this.checked);
            updateBulkActions();
        });

        $(":checkbox[name=row]").click(function () {
            updateBulkActions();
        });

    });

    //-->
</script>