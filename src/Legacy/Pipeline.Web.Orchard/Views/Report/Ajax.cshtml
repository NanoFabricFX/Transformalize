@using Transformalize.Configuration
@using Pipeline.Web.Orchard
@using Pipeline.Web.Orchard.Services
@using Pipeline.Web.Orchard.Models

@model ReportViewModel
@{
   var firstEntity = Model.Process.Entities.FirstOrDefault() ?? new Entity { Name = "Missing Entity" };

   var sortService = WorkContext.Resolve<ISortService>();
   var hasActions = Model.Process.Actions.Any(a => !a.Before && !a.After && !string.IsNullOrEmpty(a.Description) && !a.Description.StartsWith("Batch", StringComparison.OrdinalIgnoreCase));

   Script.Include("https://unpkg.com/axios@0.19.0/dist/axios.min.js").AtHead();
   Script.Include("https://unpkg.com/vue@2.6.10/dist/vue.min.js").AtHead();
   Script.Include("https://unpkg.com/linq@3.2.0/linq.min.js").AtHead();
   Script.Include("report.js").AtHead();

   if (hasActions) {
      Script.Require("BlockUI");
   }

   foreach (var script in Model.Process.Scripts.Where(s => s.Global && !string.IsNullOrEmpty(s.File) && (s.Language == "js" || s.Language == Transformalize.Constants.DefaultSetting && s.File.EndsWith(".js", StringComparison.OrdinalIgnoreCase)))) {
      Script.Include(script.File);
   }

   foreach (var script in Model.Process.Scripts.Where(s => s.Global && !string.IsNullOrEmpty(s.File) && (s.Language == "css" || s.Language == Transformalize.Constants.DefaultSetting && s.File.EndsWith(".css", StringComparison.OrdinalIgnoreCase)))) {
      Style.Include(script.File);
   }

   var title = firstEntity.Label == string.Empty ? firstEntity.Alias : firstEntity.Label;
   AppendMeta("description", title, ",");
   Layout.Title = title;
}

<style>
   .btn-sort {
      background-color: #dbdbdb;
      border-color: #d2d1d1;
      color: #727272;
   }

   .btn-xs, .btn-group-xs > .btn {
      border-radius: 3px;
      font-size: 9px;
      line-height: 1.5;
   }

   td.sorter .btn-xs {
      font-size: 7px !important;
   }

   td.sorter {
      padding: 0 3px 3px 4px !important;
   }

   div.input-group > span > div.btn-group > button.multiselect {
      -ms-border-bottom-left-radius: 0 !important;
      border-bottom-left-radius: 0 !important;
      -ms-border-top-left-radius: 0 !important;
      border-top-left-radius: 0 !important;
   }

   thead > tr > td > input.form-control {
      padding-left: 4px;
      padding-right: 4px;
      height: 30px;
   }

   #busy {
      position: fixed;
      left: 46%;
      top: 40%;
      display: none;
      background: transparent url(@Url.Content("~/Modules/Pipeline.Web.Orchard/Styles/busy.gif"));
      background-size: 149px 149px;
      background-repeat: no-repeat;
      z-index: 1020;
      height: 150px;
      width: 150px;
   }

   #busy-holder {
      background: transparent;
      width: 100%;
      height: 100%;
   }

   .form-inline .multiselect-container label.checkbox, .form-inline .multiselect-container label.radio {
      padding: 0 20px 0 10px;
   }

   .table-condensed > tbody > tr > td {
      padding: 2px;
   }

   tr.action-row {
      font-size: smaller;
      font-weight: bolder;
   }

   #layout-main-container {
      width: 98%;
   }

   div.comment {
      padding: 0;
   }

   @foreach (var script in Model.Process.Scripts.Where(s => s.Global && s.Language == "css" && string.IsNullOrEmpty(s.File))) {
   <text>/* @script.Name css script */</text>
   @Html.Raw(script.Content)

   }

</style>

<form id="id_report" class="form-inline" role="form" method="GET">

   @for (int i = 0; i < Model.Process.Entities.Count; i++) {

      var entity = Model.Process.Entities[i];

      <div class="row" style="padding-top: 2px;">

         <div id="entity-@i" class="col-sm-12 table-responsive">

            <table class="table table-condensed table-hover table-striped tablesorter">
               <thead>
                  <tr>
                     <td>{{ alias }}</td>
                  </tr>
                  <tr class="action-row">
                     <template v-for="field in outputFields">
                        <td v-bind:title="field.alias">{{ field.label }}</td>
                     </template>
                  </tr>
               </thead>
               <tbody>
                  <tr v-for="row in rows">
                     <template v-for="field in outputFields">
                        <td>{{ row[field.alias] }}</td>
                     </template>
                  </tr>
               </tbody>
            </table>
         </div>
      </div>
   }



</form>

<div id="busy_holder">
   <div id="busy"></div>
</div>

<script type="text/javascript">
   //<!--

   var orchard = {
      Url: "@(Url.Content("~/Pipeline/Api/Run/" + Model.Part.Id))",
      BatchValueFieldName: "@Common.BatchValueFieldName",
      ReportRowClassFieldName: "@Model.Part.ReportRowClassField",
      ReportRowStyleFieldName: "@Model.Part.ReportRowStyleField"
   };

   ballSoHard(orchard);

   @foreach (var script in Model.Process.Scripts.Where(s => s.Global && string.IsNullOrEmpty(s.File) && s.Language == "js")) {
      <text>/* @script.Name */</text>
      @Html.Raw(script.Content)
   }

    //-->
</script>