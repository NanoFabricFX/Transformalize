@using Pipeline.Web.Orchard
@using Pipeline.Web.Orchard.Models
@using Pipeline.Web.Orchard.Services
@using Pipeline.Web.Orchard.Services.Contracts
@model ConfigurationListViewModel
@{
    Layout.Title = "Arrangements";
    var editLink = Url.Content("~/Admin/Contents/Create/PipelineConfiguration");

    var response = new FileResponse();
    var inputFileId = 0;
    if (!string.IsNullOrEmpty(Request[Common.InputFileIdName]) && int.TryParse(Request[Common.InputFileIdName], out inputFileId)) {
        var service = WorkContext.Resolve<ISecureFileService>();
        response = service.Get(inputFileId);
    }
    var arrangementId = 0;
    if (!string.IsNullOrEmpty(Request[Common.ArrangementIdName])) {
        int.TryParse(Request[Common.ArrangementIdName], out arrangementId);
    }

    Script.Require("jQuery").AtHead();
}
<div class="row">

    <div class="col-md-6">
        <div class="btn-group pull-left">
            <button onclick="javascript: window.open('@editLink', '_self');" type="button" class="btn btn-xs btn-primary">
                <span class="glyphicon glyphicon-plus"></span> New
            </button>
        </div>
    </div>

    <div class="col-md-6">
        <div class="btn-group pull-right">
            <select title="Tag Filter"
                    class="form-control input-sm"
                    name="tagFilter"
                    size="1"
                    id="id_tag_filter"
                    style="padding: 1px; font-size: 12.5px; height: 21px;"
                    data-toggle="tooltip"
                    data-placement="top"
                    onchange="javascript: window.location = '@(Url.Action("List", "Cfg", new {area = Common.ModuleName, tagFilter = Common.AllTag}) + "/")' + $('#id_tag_filter').val();">
                @foreach (var tag in Model.Tags) {
                    <option key="@tag" selected="@(tag.Equals(Model.TagFilter, StringComparison.OrdinalIgnoreCase))" value="@tag">@tag</option>
                }
            </select>
        </div>
    </div>

</div>

@foreach (var part in Model.Configurations) {
    <form id="clone_@part.Id" method="POST" action="@(Url.Content("~/Admin/Contents/Clone/" + part.Id + "?" + Common.ReturnUrlName + "=" + Url.Encode(Url.Content("~/Admin/Contents/List/PipelineConfiguration?Options.SelectedCulture=&Options.OrderBy=Modified&Options.ContentsStatus=Draft"))))">
        <input type="hidden" name="__RequestVerificationToken" value="@Html.AntiForgeryTokenValueOrchard()">
    </form>
    <form id="remove_@part.Id" method="POST" action="@(Url.Content("~/Admin/Contents/Remove/" + part.Id + "?" + Common.ReturnUrlName + "=" + Url.Encode(Request.RawUrl)))">
        <input type="hidden" name="__RequestVerificationToken" value="@Html.AntiForgeryTokenValueOrchard()">
    </form>
}

<table class="table table-condensed table-hover" style="font-size: smaller;">
    <thead>
        <tr>
            <th>Id</th>
            <th>Title</th>
            <th>Tags</th>
            <th>File</th>
            <th>&nbsp;</th>
            <th>&nbsp;</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var part in Model.Configurations) {
            var title = part.Title();

            <tr class="@(inputFileId > 0 && part.NeedsInputFile && arrangementId == part.Id ? "success" : string.Empty)">
                <td>
                    <a href="@Url.Action("Cfg", "Api", new {id = part.Id})">@part.Id</a>
                </td>
                <td>@title</td>
                <td>
                    @foreach (var tag in part.Tags()) {
                        <span class="label label-info">@tag</span>
                    }
                </td>
                @if (inputFileId > 0 && part.NeedsInputFile && (arrangementId == 0 || arrangementId == part.Id)) {
                    <td>
                        @if (response.Status == 200) {
                            <span class="glyphicon glyphicon-file"> @response.Part.Title()</span>
                        } else {
                            <span class="glyphicon glyphicon-exclamation-sign"> @response.Message</span>
                        }
                    </td>
                } else {
                    <td>&nbsp;</td>
                }
                <td>
                    <div class="btn-group" role="group" aria-label="...">

                        @{
                            var editUrl = Url.ItemEditUrl(part.ContentItem);
                            var viewUrl = Url.ItemDisplayUrl(part.ContentItem);
                        }

                        <button title="Edit at @editUrl" type="button" class="btn btn-success btn-xs" onclick="window.open('@editUrl', '_self');">
                            <span class="glyphicon glyphicon-edit"></span>
                        </button>

                        <button title="View at @viewUrl" type="button" class="btn btn-warning btn-xs" onclick="window.open('@viewUrl', '_self')">
                            <span class="glyphicon glyphicon-eye-open"> </span>
                        </button>

                        <button title="Clone" type="button" class="btn btn-info btn-xs" onclick="$('#clone_@part.Id').submit();">
                            <span class="glyphicon glyphicon-duplicate"></span>
                        </button>

                        <button title="Delete" type="button" class="btn btn-danger btn-xs" onclick="if (confirm('Are you sure?')) { $('#remove_@part.Id').submit(); }">
                            <span class="glyphicon glyphicon-trash"></span>
                        </button>
                        
                        <button title="Download the Configuration" type="button" class="btn btn-default btn-xs" onclick="window.open('@Url.Action("Download", "Cfg", new {id = @part.Id})', '_self');">
                            <span class="glyphicon glyphicon-download"></span>
                        </button>

                        @if (part.NeedsInputFile) {
                            <button title="File" type="button" class="btn btn-default btn-xs" onclick="window.open('@(Url.Action("List", "File", new {tagFilter = Common.AllTag, ArrangementId = part.Id}))', '_self');">
                                <span class="glyphicon glyphicon-file"></span>
                            </button>
                        }
                    </div>
                </td>
                <td>
                    @if (part.Runnable && !part.NeedsInputFile || part.Runnable && part.NeedsInputFile && inputFileId > 0) {
                        <form class="form-inline" action="@Url.Action("Run", "Api", new RouteValueDictionary {{"id",part.Id}})" method="POST">
                            <input type="hidden" name="__requestverificationtoken" value="@Html.AntiForgeryTokenValueOrchard()" />
                            <input type="hidden" name="InputFileId" value="@inputFileId" />
                            @{
                                var modes = part.Modes.Split(new[] { "," }, StringSplitOptions.RemoveEmptyEntries);
                                var style = "width:80px; font-size: 12.5px; height: 21px; padding: 1px;" + (modes.Length > 1 ? string.Empty : " visibility:hidden;");
                            }
                            <select title="Mode"
                                    class="form-control input-sm"
                                    name="Mode"
                                    size="1"
                                    style="@style"
                                    data-toggle="tooltip"
                                    data-placement="top">
                                @foreach (var mode in modes) {
                                    var m = mode.TrimEnd('*');
                                    <option key="@m" value="@m" selected="@mode.EndsWith("*")">@m</option>
                                }
                            </select>
                            <button title="Run" type="submit" class="btn btn-danger btn-xs">Run</button>
                        </form>
                                } else {
                                    if (part.Runnable && part.NeedsInputFile && inputFileId == 0) {
                                        <span class="text-muted">requires file</span>
                                    } else {
                                        <text>&nbsp;</text>
                                    }
                                }
                </td>

            </tr>
        }
    </tbody>
</table>

<script type="text/javascript">
    //<!--
    $(document).ready(function() {
        function removeMessages() {
            $(".zone-messages").fadeOut();
        }
        setTimeout(removeMessages, 5000);
        $('[data-toggle="tooltip"]').tooltip();
    });
    //-->
</script>
