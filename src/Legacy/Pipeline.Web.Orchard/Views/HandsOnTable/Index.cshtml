@using Pipeline.Web.Orchard
@model Pipeline.Web.Orchard.Models.HandsOnTableViewModel

@{
    var title = Model.Part.Title();

    Script.Require("jQuery").AtHead();

    var root = "https://cdnjs.cloudflare.com/ajax/libs/handsontable/6.2.2/";
    var pikaday = "https://cdnjs.cloudflare.com/ajax/libs/pikaday/1.8.0/";

    // Script.Include("https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js").AtFoot();
    Script.Include(pikaday + "pikaday.min.js").AtFoot();
    Script.Include(root + "handsontable.full.min.js").AtFoot();
    Script.Include("jquery.blockUI.min.js").AtFoot();
    Script.Include("jquery.toastmessage.min.js").AtFoot();
    Script.Include("common.ajax.min.js").AtFoot();

    Style.Include(root + "handsontable.full.min.css");
    Style.Include(pikaday + "css/pikaday.min.css");
    Style.Include("jquery.toastmessage.min.css");
    Layout.Title = title;
}

<h2>@(title)</h2>

<button id="load" type="button" class="btn btn-warning btn-xs" style="margin-bottom: 7px;">
    <span class="glyphicon glyphicon-refresh"></span> Reload
</button>

<button id="save" type="button" class="btn btn-primary btn-xs" style="margin-bottom: 7px;">
    <span class="glyphicon glyphicon-floppy-save"></span> Save
</button>

@if (Model.ShowEditButton) {
    <button title="edit this report" type="button" class="btn btn-warning btn-xs" style="margin-bottom: 7px;" onclick="window.open('@(Url.Content("~/Admin/Contents/Edit/" + Model.Part.Id + "?" + Common.ReturnUrlName + "=" + Url.Encode(Request.RawUrl)))', '_self');">
        <span class="glyphicon glyphicon-edit"></span>
    </button>
}

<div id="target" class="handsontable"></div>

<script>
    //<!--

    $(document).ready(function () {

        var settings = {
            load: '@(Url.Action("Load", "HandsOnTable", new { id = Model.Part.Id }))',
            save: '@(Url.Action("Save", "HandsOnTable", new { id = Model.Part.Id }))',
            token: '@Html.AntiForgeryTokenValueOrchard()'
        };

        var dateMap = [];

        $('#load').click(function () {

            $.get(settings.load, function (tfl) {

                if (tfl.status === 200) {
                    var dateFormat = 'YYYY-MM-DD';
                    var fields = tfl.entities[0].fields.filter(function (item) {
                        return (item.output === undefined || item.output) && (item.system === undefined || !item.system);
                    });
                    var headers = $.map(fields, function (f) {
                        return f.label === undefined ? f.alias : f.label;
                    });
                    var columns = $.map(fields, function (f) {
                        var column = {};
                        if (f.map !== undefined) {
                            var map = tfl.maps.filter(function(m) { return m.name === f.map})[0];
                            return {
                                type: 'dropdown',
                                source: $.map(map.items, function(item){return item.from})
                            };
                        }
                        if (f.type === undefined) {
                            return {};
                        }
                        switch (f.type.toLowerCase().replace('system.','')) {
                            case 'int16':
                            case 'int32':
                            case 'int64':
                            case 'double':
                            case 'float':
                            case 'decimal':
                            case 'short':
                            case 'long':
                            case 'byte':
                            case 'int':
                                column = { type: 'numeric' };
                                break;

                            case 'date':
                            case 'time':
                            case 'datetime':
                                column = {
                                    type: 'date',
                                    dateFormat: dateFormat,
                                    defaultDate: null,
                                    showButtonPanel: true
                                };
                                break;

                            case 'bool':
                            case 'boolean':
                                column = {
                                    type: 'checkbox'
                                }
                                break;
                            default:
                                column = {};
                        }
                        return column;
                    });
                    var data = tfl.entities[0].rows === undefined ? [] : tfl.entities[0].rows;
                    if (data.length > 0) {

                        var converted = [];
                        for (var d = 0; d < data.length; d++) {
                            var row = [];
                            for (var f = 0; f < fields.length; f++) {
                                var field = fields[f];
                                var value = data[d][field.alias];
                                row.push(value);
                            }
                            converted.push(row);
                        }

                        $('#target').handsontable({
                            data: converted,
                            minSpareRows: 1,
                            rowHeaders: true,
                            colHeaders: headers,
                            columnSorting: true,
                            contextMenu: true,
                            columns: columns,
                            manualColumnResize: true,
                            manualRowResize: true,
                        });
                    } else {
                        $('#target').handsontable({
                            startRows: 1,
                            startCols: headers.length,
                            minSpareRows: 1,
                            rowHeaders: true,
                            colHeaders: headers,
                            columnSorting: true,
                            contextMenu: true,
                            columns: columns,
                            manualColumnResize: true,
                            manualRowResize: true,
                    });
                    }
                    $().toastmessage('showSuccessToast', "Data Loaded");
                } else {
                    $().toastmessage('showErrorToast', tfl.response[0].message);
                }
            }, 'json');
        });

        $('#save').click(function () {
            var data = $('#target').data('handsontable').getData().slice().filter(function (item) {
                var nullCount = 0;
                for (i = 0; i < item.length; i++) {
                    if (item[i] == null) {
                        nullCount++;
                    }
                }
                return nullCount < item.length;
            });

            data = { rows: data };

            $.ajax({
                url: settings.save,
                data: { "data": JSON.stringify(data), "__RequestVerificationToken": settings.token },
                type: 'POST',
                success: function (tfl) {
                    if (tfl.status === 200) {
                        $().toastmessage('showSuccessToast', "Data Saved");
                    } else {
                       for (i = 0; i < tfl.log.length; i++) {
                          $().toastmessage('showErrorToast', tfl.log[i].message);
                       }
                    }
                }
            });
        });

        $('#load').click();

    });
    // -->
</script>